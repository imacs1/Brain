/*
 * =====================================================================
 * File:         Docs_Config_Actions.txt
 * Folder:       C:\AI\Brain\Documentation\Config\Actions
 * Description:  Documentation for the Actions configuration, detailing
 *               the structure, purpose, and integration of Actions
 *               with the system.
 * Author:       Michael G. Lustig
 * Created On:   2024-12-30 15:00:00 UTC
 * Version:      1.0
 * Copyright:    (c) 2024 Editoza, LLC - All rights reserved.
 * =====================================================================
 */

# Config: Actions

## Overview
Actions are the fundamental building blocks of the Brain system, representing discrete units of functionality. The configuration for Actions defines their structure, permissions, and runtime behavior. This configuration is stored as JSON files and accessed via a secure, encrypted database at runtime.

---

## Key Features
1. **JSON-Based Configuration**:
   - Each Action is defined in a JSON file, enabling modularity and ease of updates.

2. **Encrypted Storage**:
   - Action configurations are stored encrypted in the database. Temporary unencrypted `.json` files can be generated for debugging or backups.

3. **Dynamic Registration**:
   - At startup, the system scans for and registers all Actions from the database into a dictionary (`_registeredActions`).

4. **RBAC Integration**:
   - Role-Based Access Control rules define which users can execute specific Actions.

5. **Extensive Metadata**:
   - Each Action includes metadata such as descriptions, versioning, and dependency mappings.

---

## Configuration Structure
An Action configuration JSON file includes the following fields:

```json
{
  "name": "ACTION_CALL_API",
  "description": "Invokes an external API and processes the response.",
  "version": "1.0",
  "parameters": {
    "url": "string",
    "method": "string",
    "headers": "object",
    "body": "object"
  },
  "rBAC": {
    "roles": ["admin", "user"],
    "timeBasedAccess": true
  },
  "dependencies": ["LoggerService", "MonitorService"],
  "cost": 10,
  "displayLevel": "Information"
}
### Fields:
1. **name**:
   - A unique identifier for the Action.

2. **description**:
   - A brief explanation of the Actionâ€™s functionality.

3. **version**:
   - Tracks the version of the Action.

4. **parameters**:
   - Defines the input parameters required for the Action.

5. **rBAC**:
   - Specifies access control rules:
     - `roles`: Defines allowed user roles.
     - `timeBasedAccess`: Indicates whether access is time-restricted.

6. **dependencies**:
   - Lists services required by the Action.

7. **cost**:
   - Specifies the resource cost (e.g., credits or tokens) for executing the Action.

8. **displayLevel**:
   - Indicates the DisplayLevel associated with the Action for logging and UI representation.

---

## Integration
1. **Dynamic Registration**:
   - Actions are dynamically discovered and registered at runtime.
   - Example:
     ```python
     _registeredActions = {
         "ACTION_CALL_API": "{guid}"
     }
     ```

2. **RBAC Enforcement**:
   - At runtime, the system validates if the user has the required roles and permissions to execute the Action.

3. **Workflow Integration**:
   - Actions are accessible as steps in Workflows, enabling complex task execution.

---

## Example Use Cases
1. **API Invocation**:
   - The `ACTION_CALL_API` Action retrieves data from an external API, processes it, and logs the response.

2. **Data Transformation**:
   - A `DATA_TRANSFORM` Action performs data cleaning and formatting.

3. **Error Handling**:
   - The `HANDLE_ERROR` Action invokes recovery procedures when failures occur.

---

## Error Handling
1. **Configuration Errors**:
   - During startup, invalid Action configurations are logged with a `Critical` DisplayLevel.
2. **Execution Failures**:
   - Failures during Action execution trigger retries or alternative paths defined in the system.

---

## Testing
1. **Unit Tests**:
   - Validate individual Action configurations for correctness.
2. **Integration Tests**:
   - Ensure seamless execution of Actions within workflows.
3. **RBAC Validation**:
   - Test role-based restrictions for Action execution.
4. **Performance Tests**:
   - Assess the execution speed of Actions under load.

---

## Security
- **Encryption**:
  - All Action configurations are encrypted in storage and decrypted only in memory during runtime.
- **RBAC**:
  - Ensures restricted execution of Actions to authorized users.

---

## Future Enhancements
1. **Real-Time Editing**:
   - Introduce an interface for admins to edit Action configurations directly from the WebUI.
2. **Versioning**:
   - Add support for multiple versions of an Action, enabling backward compatibility.
3. **Advanced Dependencies**:
   - Define conditional dependencies based on runtime parameters.

---

#End of File
